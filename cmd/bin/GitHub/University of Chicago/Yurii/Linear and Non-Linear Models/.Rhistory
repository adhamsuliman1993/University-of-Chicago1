beta0 <- Parameters[1]
beta1 <- Parameters[2]
sigmaEps <- Paramaters[3]
dtf <- regSample
((nrow(dnorm(dtf,Beta1,sqrt(Sigma)))/2)*log(2*pi*sigma_squared)+(1/(2*sigma_squared))*sum((dnorm(dtf,Beta1,sqrt(Sigma))-mu)^2))
}
linModLL(c(Beta0=beta0+1,Beta1=beta1+1,Sigma=sigmaEps),dtf)
lmodel <- lm(dnorm(Norm.sample.vector,mean(Norm.sample.vector),sd(Norm.sample.vector)^2)~Norm.sample.vector)
lmodel <- lm(dnorm(Norm.sample.vector[1],mean(Norm.sample.vector[,1]),sd = sd(Norm.sample.vector[,1])^2)~Norm.sample.vector[1])
dnorm(Norm.sample.vector[1],mean(Norm.sample.vector[,1]),sd = sd(Norm.sample.vector[,1])^2)
Norm.sample.vector
Norm.sample.vector[1]
mean(Norm.sample.vector)
mean(Norm.sample.vector, na.rm=T)
Norm.sample.vector <- as.data.frame(Norm.sample.vector)
mean(Norm.sample.vector)
my.Optimizer<-function(Start.Value,Function.To.Optimize,Epsilon,projectID){
}
my.Optimizer(4)
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
while (abs((Start.Value += 1) - Start.Value) >= Epsilon) {
.5(Start.Value)^-.5
}
}
.5(Start.Value)**-.5
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
while (abs((Start.Value += 1) - Start.Value) >= Epsilon) {
.5(Start.Value)**-.5
}
}
while (abs((Start.Value =+ 1) - Start.Value) >= Epsilon) {
.5(Start.Value)**-.5
}
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
while (abs((Start.Value =+ 1) - Start.Value) >= Epsilon) {
.5(Start.Value)**-.5
}
}
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
while (abs((Start.Value =+ 1) - Start.Value) >= Epsilon) {
Function.To.Optimize<-.5(Start.Value)**-.5
}
}
my.Optimizer(Start.Value=5, Epsilon=6)
my.Function<-function(my.X,projectID) {
my.X^2*3-my.X*5-6
}
my.function(6,projectID)
my.Function((5))
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
while (abs(Start.Value.New-Start.Value)>Epsilon) {
Start.Value = Start.Value.New
Start.Value.new = .5(Start.Value)**-.5
}
}
my.Optimizer(5,2)
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
Start.Value.New = Start.Value
while (abs(Start.Value.New-Start.Value)>Epsilon) {
Start.Value = Start.Value.New
Start.Value.new = .5(Start.Value)**-.5
}
}
my.Optimizer(5,2)
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon=1, projectID){
Start.Value.New = Start.Value
while (abs(Start.Value.New-Start.Value)>Epsilon) {
Start.Value = Start.Value.New
Start.Value.new = .5(Start.Value)**-.5
}
}
my.Optimizer(5,2)
optim(my.Optimizer(5,2))
(my.Optimizer(5,2))
Start.Value.New = .5(Start.Value)**-.5
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon=1, projectID){
while (abs(Start.Value.New-Start.Value)>Epsilon) {
Function.To.Optomize <- function(Start.Value){
(.5*(Start.Value)**-.5)
Start.Value.New = .5(Start.Value)**-.5
}
}
}
(my.Optimizer(5,2))
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon=1, projectID){
Start.Value.New=Start.Value
while (abs(Start.Value.New-Start.Value)>Epsilon) {
Function.To.Optomize <- function(Start.Value){
(.5*(Start.Value)**-.5)
Start.Value.New = .5(Start.Value)**-.5
}
}
}
(my.Optimizer(5,2))
(my.Optimizer(100,2))
(my.Optimizer(.000100,2))
(my.Optimizer(.000100,2))
[1:10]
seq(1:10)
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon=0, projectID){
Start.Value.New=Start.Value
while (abs(Start.Value.New-Start.Value)>Epsilon) {
(.5*(Start.Value)**-.5)
Start.Value.New = .5(Start.Value)**-.5
}
}
(my.Optimizer(.000100,2))
knitr::opts_chunk$set(echo = TRUE)
if(!"pacman" %in% rownames(installed.packages())) {
install.packages("pacman")
}
pacman::p_load(tidyverse,faraway,corrplot, tinytex, zoo, knitr, rgl, relaimpo, MuMIn, nycflights13,ggplot2, mass, dplyr, magrittr)
func1<- function (x) {
mean(!is.na(x))
}
func1(5)
func2<- function(x){
x / sum(x, na.rm = TRUE)
}
func2(seq(5:10))
func3<- function(x,y){
sd(x, na.rm = TRUE) / mean(y, na.rm = TRUE)
}
func3(seq.int(4,100,8),seq.int(45,55,1))
2**2*3
`documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction` <- readRDS("C:/Users/u353822/Downloads/documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction.rds")
`Linear and Non-Linear Homework2` <- readRDS("C:/Users/u353822/Downloads/documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction (1).rds")
Linear and Non-Linear Homework2
read.table(Linear and Non-Linear Homework2)
View(`documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction`)
documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction[["Week2_Test_Function"]]
Week2_Test_Function
View(`documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction`)
View(`documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction.Week2_Test_Function`)
View(documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2FMScA_Nonlinear_Models_Week2_TestFunction[["Week2_Test_Function"]])
testFunction<-readRDS(file=paste(dataPath,"MScA_Nonlinear_Models_Week2_TestFunction.rds",sep="/"))$Week2_Test_Function
testFunction<-readRDS(file=paste('C:/Users/u353822/Documents/R/Linear and Non-Linear Models,"MScA_Nonlinear_Models_Week2_TestFunction.rds",sep="/"))$Week2_Test_Function
testFunction<-readRDS(file=paste('C:/Users/u353822/Documents/R/Linear and Non-Linear Models',"MScA_Nonlinear_Models_Week2_TestFunction.rds",sep="/"))$Week2_Test_Function
testFunction<-readRDS(file=paste("C:/Users/u353822/Documents/R/Linear and Non-Linear Models","MScA_Nonlinear_Models_Week2_TestFunction.rds",sep="/"))$Week2_Test_Function
testFunction<-readRDS(file=paste("C:/Users/u353822/Downloads","documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2Fsample_for_optimization.csv",sep="/"))$Week2_Test_Function
testFunction<-read.csv(file=paste("C:/Users/u353822/Downloads","documents%2FMScA Linear and Non-Linear Models 31010%2FMScA 31010 Lecture 2%2Fsample_for_optimization.csv",sep="/"))$Week2_Test_Function
testFunction
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
Start.Value.old = 0
while (abs(Start.Value-Start.Value.old)>Epsilon) {
function(Function.To.Optimize){
(.5*(Function.To.Optimize)**-.5)
Start.Value.old = start.value
Start.Value = .5(Start.Value)**-.5
}
}
}
my.Optimizer(-3,Norm.sample.vector,Epsilon=.00001)
(my.Optimizer(Start.Value=-3,Norm.sample.vector,Epsilon=.00001))
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
Start.Value.old = 0
while (abs(Start.Value-Start.Value.old)>Epsilon) {
function(Function.To.Optimize){
#derivative of x^.5
(.5*(Function.To.Optimize)**-.5)
}
Start.Value.old = start.value
Start.Value = .5(Start.Value)**-.5
}
print(Start.Value)
}
Norm.sample.vector
(my.Optimizer(Start.Value=-3,Norm.sample.vector,Epsilon=.00001))
(my.Optimizer(Start.Value=-3,Norm.sample.vector,Epsilon=.00001))
(my.Optimizer(-3,Norm.sample.vector,Epsilon=.00001))
#derivative of x^.5
(.5*(Start.Value)**-.5)
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
Start.Value.old = 0
while (abs(Start.Value-Start.Value.old)>Epsilon) {
Function.To.Optimize <- function(Start.Value){
#derivative of x^.5
(.5*(Start.Value)**-.5)
}
Start.Value.old = Start.Value
Start.Value = .5(Start.Value)**-.5
}
print(Start.Value)
}
Norm.sample.vector
(my.Optimizer(-3,Norm.sample.vector,Epsilon=.00001))
(my.Optimizer(-3,Norm.sample.vector,Epsilon=.00001))
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
Start.Value.old = 0
while (abs(Start.Value-Start.Value.old)>Epsilon) {
Function.To.Optimize <- function(Start.Value){
#derivative of x^.5
(.5*(Start.Value)**-.5)
}
Start.Value.old = Start.Value
Start.Value = .5*(Start.Value)**-.5
}
print(Start.Value)
}
(my.Optimizer(-3,Norm.sample.vector,Epsilon=.00001))
Epsilon = Epsilon
my.Optimizer<-function(Start.Value, Function.To.Optimize, Epsilon, projectID){
Epsilon = Epsilon
Start.Value.old = 0
while (abs(Start.Value-Start.Value.old) > Epsilon) {
Function.To.Optimize <- function(Start.Value){
#derivative of x^.5
(.5*(Start.Value)**-.5)
}
Start.Value.old = Start.Value
Start.Value = .5*(Start.Value)**-.5
}
print(Start.Value)
}
(my.Optimizer(-3,Norm.sample.vector,Epsilon=.00001))
Danny<-readRDS(file=paste("Week2_TestFunction",sep="/"))$Week2_Test_Function
Data <- read.csv(W3CorrelationExample)
Data <- read.csv('W3CorrelationExample')
Data <- read.csv('W3CorrelationExample')
Data <- read.csv('W3CorrelationExample')
Data <- read.csv('W3CorrelationExample.csv')
Data <- read.csv('W3CorrelationExample.csv')
plot(Data$X,Data$Y)
hist(Data$X)
hist(Data$Y)
lm(Y~X, Data)
lm.Data <- lm(Y~X, Data)
summary(lm.Data)
nSample <- nrow(Data)
plot(rank(Data$X)/nSample,rank(Data$Y)/nSample)
hist(Data$Y)
corr(rank(Data$X)/nSample,rank(Data$Y)/nSample)
cor(rank(Data$X)/nSample,rank(Data$Y)/nSample)
(fittedDistrX<-fitdistr(Data$X,"exponential"))
??fitdistr
library(MASS)
(fittedDistrX<-fitdistr(Data$X,"exponential"))
(fittedDistrX<-fitdistr(Data$y,"exponential"))
(fittedDistrX<-fitdistr(Data$Y,"exponential"))
ks.test(Data$X,"qnorm",mean=.3397, sd=.01074337)
ks.test(Data$Y,"qnorm",mean=.3397, sd=.01074337)
(fittedDistrX<-fitdistr(Data$Y))
,"exponential"
(fittedDistrX<-fitdistr(Data$Y,"exponential"))
?qnorm
ks.test(Data$Y,"qnorm",mean=0.33973523, sd=0.01074337)
lm.Data <- lm(Y~X, Data)
summary(lm.Data)$r.squared
plot(lm.Data$X, summary(lm.data)$residuals)
plot(lm.Data$X, summary(lm.Data)$residuals)
plot(lm.Data$X, lm.Data$residuals)
nrow(lm.Data$X)
plot(Data$X, lm.Data$residuals)
#CounterCommonocity
plot(rank(Data$X)/nSample,rank(Data$Y)/nSample)
install.packages("RNetCDF","copula")
install.packages("RNetCDF","copula")
suppressWarnings(library(RNetCDF))
suppressWarnings(library(copula))
suppressWarnings(library(MASS))
#1.1 Example of uncorrelated, but dependent variables
nSample<-1000
set.seed(893075)
Variable.X<-rnorm(nSample,0,1)
Variable.Y<-Variable.X^2
df<-data.frame(X=Variable.X,Y=Variable.Y)
plot(df$X,df$Y)
plot(rank(df$X)/nSample,rank(df$Y)/nSample)
?rank
df$X
df$X[5]
df$X[1:5]
rank(df$X[1:5])
rank(df$Y)
rank(df$Y[1:5])
rank(df$X[1:5])/
rank(df$Y[1:5])
suppressWarnings(library(copula))
install.packages("RNetCDF","copula")
install.packages("RNetCDF", "copula")
suppressWarnings(library(copula))
install.packages("RNetCDF","copula")
install.packages("RNetCDF","copula")
suppressWarnings(library(copula))
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
library(MASS,mclust, nor1mix)
install.packages(nor1mix)
install.packages("nor1mix")
library(MASS,mclust, nor1mix)
library('MASS', 'mclust', 'nor1mix')
library('MASS', 'mclust', 'nor1mix')
library('MASS', 'mclust', 'nor1mix', 'copula')
library('MASS', 'mclust', 'nor1mix', 'copula', 'RNetCDF')
library('MASS', 'mclust', 'nor1mix', 'copula', 'RNetCDF')
library('MASS', 'mclust', 'nor1mix', 'copula')#, 'RNetCDF')
library('MASS', 'mclust', 'nor1mix', 'copula', 'RNetCDF')
library('RNetCDF')
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
install.packages("RNetCDF", "copula")
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
library('mclust')
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
library(nor1mix)
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
midBound
sort(midBound)
points(rank(test_data)/nrow(test_data), sort(midBound), col ='green')
points(rank(test_data)/nrow(test_data), midBound, col ='green')
#plot's of data
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
points(rank(test_data)/nrow(test_data), midBound, col ='green')
#plot's of data
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
points(sort(rank(test_data)/nrow(test_data)), sort(midBound), col ='green')
midBound <- sapply(x_ranks, function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
midBound <- c(sort(midBound))
points(sort(rank(test_data)/nrow(test_data)), sort(midBound), col ='green')
#plot's of data
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
points(sort(rank(test_data)/nrow(test_data)), sort(midBound), col ='green')
midBound
midBound <- c(sort(midBound), rm.na= T)
midBound
midBound <- head(c(sort(midBound), 5))
midBound
theta = Frank.Copula.Fit@estimate
alpha=.5
midBound <- sapply(x_ranks, function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
midBound <- c(sort(midBound))
midBound
#plot's of data
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
points(sort(rank(test_data)/nrow(test_data)), sort(midBound), col ='green')
rank(midBound)/nrow(test_data)
quantile = midBound
res <- list (copula.type = "Frank",
parameter = Frank.Copula.Fit@estimate ,
quantile = midBound)
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
#plot's of data
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
points(sort(rank(test_data)/nrow(test_data)), sort(midBound), col ='green')
midBound
head(Res)
head(res)
res <- list (copula.type = "Frank",
parameter = Frank.Copula.Fit@estimate ,
quantile = midBound)
head(res)
res <- list (copula.type = "Frank",
parameter = Frank.Copula.Fit@estimate ,
quantile = midBound)
saveRDS(res, file = paste('result.rds',sep = '/'))
res
result <- readRDS("C:/Users/u353822/Documents/University of Chicago/R/Linear and Non-Linear Models/result.rds")
saveRDS(res, file = paste('result.rds',sep = '/'))
res <- list (copula.type = "Frank",
parameter = Frank.Copula.Fit@estimate ,
quantile = midBound)
saveRDS(res, file = paste('result.rds',sep = '/'))
saveRDS(res, file = paste('result.rds',sep = '/'))
midBound <- sort(c(midBound))
midBound
theta = Frank.Copula.Fit@estimate
alpha=.5
midBound <- sapply(x_ranks, function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
midBound <- sort(c(midBound))
midBound
#plot's of data
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
points(sort(rank(test_data)/nrow(test_data)), sort(midBound), col ='green')
rank(midBound)/nrow(test_data)
quantile = midBound
res
midBound <- sort(c(midBound))
midBound
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
x_ranks<- rank(test_data[,1])/nrow(test_data[,1])
x_ranks
test_data
test_data[,1]
x_ranks<- rank(test_data[,1])/nrow(test_data[,1])
x_ranks
x_ranks<- rank(test_data[,1])/length(test_data[,1])
x_ranks
theta = Frank.Copula.Fit@estimate
alpha=.5
midBound <- sapply(x_ranks, function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
midBound <- sort(c(midBound))
midBound
x_ranks
x_ranks<- rank(test_data[,1])/nrow(test_data[,1])
x_ranks
class(test_data[,1])
class(test_data)
nrow(test_data)
theta = Frank.Copula.Fit@estimate
alpha=.5
midBound <- sapply(x_ranks, function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
midBound <- (c(midBound))
midBound
midBound <- c(midBound)
midBound
midBound <- sapply(x_ranks, function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
midBound <- c(midBound)
midBound
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
#plot's of data
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
points(sort(rank(test_data)/nrow(test_data)), sort(midBound), col ='green')
points(sort(rank(test_data[,1])/length(test_data[,1])), sort(midBound), col ='green')
ggplot(test_data, aes(x=test_data[,1], y=test_data[,2]))+geom_smooth(midBound)
ggplot(test_data, aes(x=test_data[,1], y=test_data[,2]))+geom_smooth(aes(midBound))
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
copula <- rank(test_data)/length(test_data[,1]+1)
copula
copula <- rank(test_data)/length(test_data)
copula
copula <- data.rame((test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
copula <- data.frame((test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
copula
copula[,1]
#plot's of data
#plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
#points(sort(rank(test_data[,1])/length(test_data[,1])), sort(midBound), col ='green')
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_points() +
geom_smooth(aes(x= copula[,1],midBound))
#plot's of data
#plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
#points(sort(rank(test_data[,1])/length(test_data[,1])), sort(midBound), col ='green')
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_points() +
geom_smooth(aes(x= copula[,1],midBound))
#plot's of data
#plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
#points(sort(rank(test_data[,1])/length(test_data[,1])), sort(midBound), col ='green')
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point() +
geom_smooth(aes(x= copula[,1],midBound))
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
copula <- data.frame(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
#plot's of data
#plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
#points(sort(rank(test_data[,1])/length(test_data[,1])), sort(midBound), col ='green')
copula
#either Frank or Gaussian
plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
copula[,2]
plot(copula[,1],copula[,2])
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point()
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point()
+geom_smooth(aes(x= copula[,1],midBound, color='green'))
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point()
+geom_smooth(aes(x= copula[,1],midBound, color='green'))
+geom_smooth(aes(x= copula[,1], y=midBound, color='green'))
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point()
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point() + geom_smooth(aes(x= copula[,1], y=midBound, color='green'))
length(copula)
length(copula[,1])
length(midBound)
midBound <- sapply(copula[,1], function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
length(midBound)
source('~/University of Chicago/R/Linear and Non-Linear Models/Homework3.R', echo=TRUE)
midBound <- sapply(copula[,1], function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point() + geom_smooth(aes(x= copula[,1], y=midBound, color='green'))
res <- list (copula.type = "Frank",
parameter = Frank.Copula.Fit@estimate ,
quantile = midBound)
res
res <- list (copula.type = c("Frank"),
parameter = c(Frank.Copula.Fit@estimate) ,
quantile = c(midBound))
res
saveRDS(res, file = paste('result.rds',sep = '/'))
length(test_data[,1]+1)
length(test_data[,1]+1)+1
copula <- data.frame(rank(test_data[,1])/(length(test_data[,1])+1), rank(test_data[,2])/(length(test_data[,2])+1)
copula <- data.frame(rank(test_data[,1])/(length(test_data[,1])+1), rank(test_data[,2])/(length(test_data[,2])+1))
copula <- data.frame(rank(test_data[,1])/(length(test_data[,1])+1), rank(test_data[,2])/(length(test_data[,2])+1))
midBound <- sapply(copula[,1], function(z)
-log(1-alpha*(1-exp(-theta))/(exp(-theta*z)+alpha*(1-exp(-theta*z))))/theta)
#plot's of data
#plot(rank(test_data[,1])/length(test_data[,1]+1), rank(test_data[,2])/length(test_data[,2]+1))
#points(sort(rank(test_data[,1])/length(test_data[,1])), sort(midBound), col ='green')
copula
ggplot(copula, aes(x=copula[,1], y=copula[,2]))+
geom_point() + geom_smooth(aes(x= copula[,1], y=midBound, color='green'))
res <- list (copula.type = c("Frank"),
parameter = c(Frank.Copula.Fit@estimate) ,
quantile = c(midBound))
saveRDS(res, file = paste('result.rds',sep = '/'))
