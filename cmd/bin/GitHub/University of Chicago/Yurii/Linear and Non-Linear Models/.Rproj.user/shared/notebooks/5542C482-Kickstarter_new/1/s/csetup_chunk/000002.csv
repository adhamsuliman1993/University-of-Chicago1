"0","#rm(list=ls())"
"0","knitr::opts_chunk$set(echo = TRUE)"
"0","if(!""pacman"" %in% rownames(installed.packages())) {"
"0","  install.packages(""pacman"")"
"0","}"
"0","pacman::p_load(tidyverse,faraway,corrplot, tinytex, dplyr,zoo, knitr, rgl, relaimpo, MuMIn, broom,ggplot2, tidyr, fields, cluster, data.table, reshape2,poLCA, stats, copula, caret, GGally, psych,pROC,RODBC, quantreg, ROCR, plot.new, rpart, rpart.plot, rattle, RColorBrewer, e1071,gains,miceadds,multiwayvcov)"
"2","Installing package into ‘C:/Users/u353822/Documents/R/win-library/3.4’
(as ‘lib’ is unspecified)
"
"2","cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/src/contrib/PACKAGES.rds': HTTP status was '404 Not Found'"
"2","package ‘plot.new’ is not available (for R version 3.4.3)"
"2","cannot open URL 'http://www.stats.ox.ac.uk/pub/RWin/bin/windows/contrib/3.4/PACKAGES.rds': HTTP status was '404 Not Found'"
"2","Bioconductor version 3.6 (BiocInstaller 1.28.0), ?biocLite for help
"
"2","A new version of Bioconductor is available after installing the most recent version of R; see
  http://bioconductor.org/install
"
"2","there is no package called ‘plot.new’"
"2","Failed to install/load:
plot.new"
"0","fun.okc.2= function (data = data, nclust = nclust, lnorm = lnorm, tolerance = tolerance) "
"0","{"
"0","    M = nrow(data)"
"0","    N = ncol(data)"
"0","    K = nclust"
"0","    niterations = 50"
"0","#    datanorm = apply(data, 2, fun.normalize)"
"0","    datanorm = scale(data)"
"0","    S = matrix(sample(c(0, 1), M * K, replace = TRUE), M, K)"
"0","    S = cbind(S, rep(1, M))"
"0","    W = matrix(runif(N * K), K, N)"
"0","    W = rbind(W, rep(0, N))"
"0","    sse = rep(0, niterations)"
"0","    oprevse = exp(70)"
"0","    opercentse = 1"
"0","    i = 1"
"0","    while ((i <= niterations) & (opercentse > tolerance)) {"
"0","        for (k in 1:K) {"
"0","            sminusk = S[, -k]"
"0","            wminusk = W[-k, ]"
"0","            s = as.matrix(S[, k])"
"0","            w = t(as.matrix(W[k, ]))"
"0","            dstar = datanorm - sminusk %*% wminusk"
"0","            prevse = exp(70)"
"0","            percentse = 1"
"0","            l = 1"
"0","            while ((l <= niterations) & (percentse > tolerance)) {"
"0","                for (m in 1:N) {"
"0","                  if (lnorm == 2) {"
"0","                    w[1, m] = mean(dstar[s == 1, m], na.rm = TRUE)"
"0","                  }"
"0","                  if (lnorm == 1) {"
"0","                    w[1, m] = median(dstar[s == 1, m], na.rm = TRUE)"
"0","                  }"
"0","                }"
"0","                for (m in 1:M) {"
"0","                  if (lnorm == 2) {"
"0","                    ss1 = sum((dstar[m, ] - w[1, ])^2, na.rm = TRUE)"
"0","                    ss0 = sum((dstar[m, ])^2, na.rm = TRUE)"
"0","                  }"
"0","                  if (lnorm == 1) {"
"0","                    ss1 = sum(abs(dstar[m, ] - w[1, ]), na.rm = TRUE)"
"0","                    ss0 = sum(abs(dstar[m, ]), na.rm = TRUE)"
"0","                  }"
"0","                  if (ss1 <= ss0) {"
"0","                    s[m, 1] = 1"
"0","                  }"
"0","                  if (ss1 > ss0) {"
"0","                    s[m, 1] = 0"
"0","                  }"
"0","                }"
"0","                if (sum(s) == 0) {"
"0","                  s[sample(1:length(s), 2)] = 1"
"0","                }"
"0","                if (lnorm == 2) {"
"0","                  se = sum((dstar - s %*% w)^2, na.rm = TRUE)"
"0","                }"
"0","                if (lnorm == 1) {"
"0","                  se = sum(abs(dstar - s %*% w), na.rm = TRUE)"
"0","                }"
"0","                percentse = 1 - se/prevse"
"0","                prevse = se"
"0","                l = l + 1"
"0","            }"
"0","            S[, k] = as.vector(s)"
"0","            W[k, ] = as.vector(w)"
"0","        }"
"0","        if (lnorm == 2) "
"0","            sse[i] = sum((datanorm - S %*% W)^2, na.rm = TRUE)/sum((datanorm - "
"0","                mean(datanorm, na.rm = TRUE))^2, na.rm = TRUE)"
"0","        if (lnorm == 1) "
"0","            sse[i] = sum(abs(datanorm - S %*% W), na.rm = TRUE)/sum(abs(datanorm - "
"0","                median(datanorm, na.rm = TRUE)), na.rm = TRUE)"
"0","        if (lnorm == 2) {"
"0","            ose = sum((datanorm - S %*% W)^2, na.rm = TRUE)"
"0","        }"
"0","        if (lnorm == 1) {"
"0","            ose = sum(abs(datanorm - S %*% W), na.rm = TRUE)"
"0","        }"
"0","        opercentse = (oprevse - ose)/oprevse"
"0","        oprevse = ose"
"0","        i = i + 1"
"0","    }"
"0","    if (lnorm == 2) "
"0","        vaf = cor(as.vector(datanorm), as.vector(S %*% W), use = ""complete.obs"")^2"
"0","    if (lnorm == 1) "
"0","        vaf = 1 - sse[i - 1]"
"0","     rrr = list(Data = data, Normalized.Data = datanorm, Tolerance = tolerance, "
"0","        Groups = S[, 1:K], Centroids = round(W[1:K, ], 2), SSE.Percent = sse[1:i - "
"0","            1], VAF = vaf)"
"0","    return(rrr)"
"0","}"
"0","komeans=function (data = data, nclust = nclust, lnorm = lnorm, nloops = nloops, tolerance = .0001, seed = 71193123) "
"0","{"
"0","    prevsse = 100"
"0","    set.seed(seed)"
"0","    for (i in 1:nloops) {"
"0","        z = fun.okc.2(data = data, nclust = nclust, lnorm = lnorm, "
"0","            tolerance = tolerance)"
"0","        if (z$SSE.Percent[length(z$SSE.Percent[z$SSE.Percent >  0])] < prevsse) {"
"0","            prevsse = z$SSE.Percent[length(z$SSE.Percent[z$SSE.Percent >  0])]"
"0","            ind = i"
"0","            z.old = z"
"0","        }"
"0","    }"
"0","    return(list(data = z.old$Data, Normalized.Data = z.old$Normalized.Data, "
"0","        Group = z.old$Group %*% as.matrix(2^(0:(nclust-1)) ), Centroids = z.old$Centroids, Tolerance = z.old$Tolerance, "
"0","        SSE.Pecent = z.old$SSE.Percent, VAF = z.old$VAF, iteration = ind, "
"0","        seed = seed))"
"0","}"
"0","clustreg=function(dat,k,tries,sed,niter){"
"0","set.seed(sed)"
"0","dat=as.data.frame(dat)"
"0","rsq=rep(NA,niter)"
"0","res=list()"
"0","rsq.best=0"
"0","    for(l in 1:tries) {"
"0","	c = sample(1:k,nrow(dat),replace=TRUE)"
"0","	yhat=rep(NA,nrow(dat))"
"0","	for(i in 1:niter) {		"
"0","		resid=pred=matrix(0,nrow(dat),k)"
"0","		for(j in 1:k){	"
"0","			pred[,j]=predict(glm(dat[c==j,],family=""gaussian""),newdata=dat)		"
"0","			resid[,j] = (pred[,j]-dat[,1])^2"
"0","		}"
"0","	c = apply(resid,1,fun.index.rowmin)"
"0","	for(m in 1:nrow(dat)) {yhat[m]=pred[m,c[m]]}"
"0","	rsq[i] = cor(dat[,1],yhat)^2	"
"0","	#print(rsq[i])"
"0","	}"
"0","	"
"0","	if(rsq[niter] > rsq.best) {	"
"0","		rsq.best=rsq[niter]"
"0","		l.best=l"
"0","            c.best=c"
"0","		yhat.best=yhat"
"0","		}"
"0","    }"
"0","    for(i in k:1) res[[i]]=summary(lm(dat[c.best==i,]))"
"0","	"
"0","return(list(data=dat,nclust=k,tries=tries,seed=sed,rsq.best=rsq.best,number.loops=niter, Best.try=l.best,cluster=c.best,results=res))"
"0","}"
"0","fun.index.rowmin=function(x) {"
"0","    "
"0","    z=(1:length(x)) [x == min(x)]"
"0","    if(length(z) > 1) { z=sample(z,1)}"
"0","    return ( z ) }"
"0","clustreg.predict=function(results,newdat){"
"0","	yhat=rep(NA,nrow(newdat))"
"0","	resid=pred=matrix(0,nrow(newdat),length(table(results$cluster)))"
"0","		"
"0","		for(j in 1:length(table(results$cluster))){			"
"0","			pred[,j]=predict(glm(results$data[results$cluster==j,],family=""gaussian""),newdata=newdat)		"
"0","			resid[,j] = (pred[,j]-newdat[,1])^2"
"0","		}"
"0","	c = apply(resid,1,fun.index.rowmin)"
"0","	for(m in 1:nrow(newdat)) {yhat[m]=pred[m,c[m]]}"
"0","	rsq = cor(newdat[,1],yhat)^2	"
"0","return(list(results=results,newdata=newdat,cluster=c,yhat=yhat,rsq=rsq))"
"0","}"
