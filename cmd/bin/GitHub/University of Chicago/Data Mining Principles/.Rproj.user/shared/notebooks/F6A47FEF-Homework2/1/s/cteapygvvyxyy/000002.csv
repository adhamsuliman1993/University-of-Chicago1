"0","fun.okc.2= function (data = data, nclust = nclust, lnorm = lnorm, tolerance = tolerance) "
"0","{"
"0","    M = nrow(data)"
"0","    N = ncol(data)"
"0","    K = nclust"
"0","    niterations = 50"
"0","#    datanorm = apply(data, 2, fun.normalize)"
"0","    datanorm = scale(data)"
"0","    S = matrix(sample(c(0, 1), M * K, replace = TRUE), M, K)"
"0","    S = cbind(S, rep(1, M))"
"0","    W = matrix(runif(N * K), K, N)"
"0","    W = rbind(W, rep(0, N))"
"0","    sse = rep(0, niterations)"
"0","    oprevse = exp(70)"
"0","    opercentse = 1"
"0","    i = 1"
"0","    while ((i <= niterations) & (opercentse > tolerance)) {"
"0","        for (k in 1:K) {"
"0","            sminusk = S[, -k]"
"0","            wminusk = W[-k, ]"
"0","            s = as.matrix(S[, k])"
"0","            w = t(as.matrix(W[k, ]))"
"0","            dstar = datanorm - sminusk %*% wminusk"
"0","            prevse = exp(70)"
"0","            percentse = 1"
"0","            l = 1"
"0","            while ((l <= niterations) & (percentse > tolerance)) {"
"0","                for (m in 1:N) {"
"0","                  if (lnorm == 2) {"
"0","                    w[1, m] = mean(dstar[s == 1, m], na.rm = TRUE)"
"0","                  }"
"0","                  if (lnorm == 1) {"
"0","                    w[1, m] = median(dstar[s == 1, m], na.rm = TRUE)"
"0","                  }"
"0","                }"
"0","                for (m in 1:M) {"
"0","                  if (lnorm == 2) {"
"0","                    ss1 = sum((dstar[m, ] - w[1, ])^2, na.rm = TRUE)"
"0","                    ss0 = sum((dstar[m, ])^2, na.rm = TRUE)"
"0","                  }"
"0","                  if (lnorm == 1) {"
"0","                    ss1 = sum(abs(dstar[m, ] - w[1, ]), na.rm = TRUE)"
"0","                    ss0 = sum(abs(dstar[m, ]), na.rm = TRUE)"
"0","                  }"
"0","                  if (ss1 <= ss0) {"
"0","                    s[m, 1] = 1"
"0","                  }"
"0","                  if (ss1 > ss0) {"
"0","                    s[m, 1] = 0"
"0","                  }"
"0","                }"
"0","                if (sum(s) == 0) {"
"0","                  s[sample(1:length(s), 2)] = 1"
"0","                }"
"0","                if (lnorm == 2) {"
"0","                  se = sum((dstar - s %*% w)^2, na.rm = TRUE)"
"0","                }"
"0","                if (lnorm == 1) {"
"0","                  se = sum(abs(dstar - s %*% w), na.rm = TRUE)"
"0","                }"
"0","                percentse = 1 - se/prevse"
"0","                prevse = se"
"0","                l = l + 1"
"0","            }"
"0","            S[, k] = as.vector(s)"
"0","            W[k, ] = as.vector(w)"
"0","        }"
"0","        if (lnorm == 2) "
"0","            sse[i] = sum((datanorm - S %*% W)^2, na.rm = TRUE)/sum((datanorm - "
"0","                mean(datanorm, na.rm = TRUE))^2, na.rm = TRUE)"
"0","        if (lnorm == 1) "
"0","            sse[i] = sum(abs(datanorm - S %*% W), na.rm = TRUE)/sum(abs(datanorm - "
"0","                median(datanorm, na.rm = TRUE)), na.rm = TRUE)"
"0","        if (lnorm == 2) {"
"0","            ose = sum((datanorm - S %*% W)^2, na.rm = TRUE)"
"0","        }"
"0","        if (lnorm == 1) {"
"0","            ose = sum(abs(datanorm - S %*% W), na.rm = TRUE)"
"0","        }"
"0","        opercentse = (oprevse - ose)/oprevse"
"0","        oprevse = ose"
"0","        i = i + 1"
"0","    }"
"0","    if (lnorm == 2) "
"0","        vaf = cor(as.vector(datanorm), as.vector(S %*% W), use = ""complete.obs"")^2"
"0","    if (lnorm == 1) "
"0","        vaf = 1 - sse[i - 1]"
"0","     rrr = list(Data = data, Normalized.Data = datanorm, Tolerance = tolerance, "
"0","        Groups = S[, 1:K], Centroids = round(W[1:K, ], 2), SSE.Percent = sse[1:i - "
"0","            1], VAF = vaf)"
"0","    return(rrr)"
"0","}"
"0","?lnorm"
"1","No documentation for ‘lnorm’ in specified packages and libraries:
"
"1","you could try ‘??lnorm’
"
"0","komeans=function (data = data, nclust = nclust, lnorm = lnorm, nloops = nloops, tolerance = .0001, seed = 71193123) "
"0","{"
"0","    prevsse = 100"
"0","    set.seed(seed)"
"0","    for (i in 1:nloops) {"
"0","        z = fun.okc.2(data = data, nclust = nclust, lnorm = lnorm, "
"0","            tolerance = tolerance)"
"0","        if (z$SSE.Percent[length(z$SSE.Percent[z$SSE.Percent >  0])] < prevsse) {"
"0","            prevsse = z$SSE.Percent[length(z$SSE.Percent[z$SSE.Percent >  0])]"
"0","            ind = i"
"0","            z.old = z"
"0","        }"
"0","    }"
"0","    return(list(data = z.old$Data, Normalized.Data = z.old$Normalized.Data, "
"0","        Group = z.old$Group %*% as.matrix(2^(0:(nclust-1)) ), Centroids = z.old$Centroids, Tolerance = z.old$Tolerance, "
"0","        SSE.Pecent = z.old$SSE.Percent, VAF = z.old$VAF, iteration = ind, "
"0","        seed = seed))"
"0","}"
